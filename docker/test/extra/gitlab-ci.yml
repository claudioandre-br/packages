######################################################################
# Copyright (c) 2019 Claudio Andr√© <claudioandre.br at gmail.com>
#
# This program comes with ABSOLUTELY NO WARRANTY; express or implied.
#
# This program is free software: you can redistribute it and/or modify
# it under the terms of the GNU General Public License as published by
# the Free Software Foundation, as expressed in version 2, seen at
# http://www.gnu.org/licenses/gpl-2.0.html
######################################################################

services:
  - docker

stages:
- delivery

.CI_header: &CI_header  'echo;
       echo "*********************************************";
       echo "***     JavaScript bindings for GNOME     ***";
       echo "***        Continuous Integration         ***";
       echo "*********************************************";
       echo;
    '
.CI_footer: &CI_footer 'echo;
       echo "*********************************************";
       echo "***             See you soon              ***";
       echo "*********************************************";
    '

.JHBuild files: &JHB_files  [.cache/jhbuild/build/gjs/*.log, .cache/jhbuild/build/gjs/Makefile, .cache/jhbuild/build/gjs/configure]
.Coverage files: &cov_files [.cache/jhbuild/build/gjs/*.log, .cache/jhbuild/build/gjs/Makefile, .cache/jhbuild/build/gjs/configure, coverage/]
.Regular files: &reg_files  [configure, Makefile, analysis/, ./*.log, gjs-1.*/_build/sub/test-suite.log]
.Flatpak files: &pak_files  [./*.flatpak]

.jhbuild: &jhbuild
  artifacts:
    name: log_jhbuild
    when: always
    paths: *JHB_files

.coverage: &coverage
  artifacts:
    name: log_coverage
    when: always
    paths: *cov_files

.package: &package
  artifacts:
    name: log_package
    paths: *pak_files

#############################################
#          Create CI Docker Images          #
#############################################
.images_template: &create_images
  image: docker:latest
  stage: delivery
  services:
    - docker:dind
#  only
#    variables
#      - $CRON_TASK == "BUILD_CI_IMAGES"

  script:
    # CI starts here. Previous messages are from GitLab Runner setup.
    - *CI_header

    # Register QEMU archs
    - docker run --rm --privileged multiarch/qemu-user-static:register --reset

    # Build using the Dockerfile
    - 'if [[ -n "$DOCKERFILE" ]]; then
         wget https://github.com/multiarch/qemu-user-static/releases/download/v2.12.0/x86_64_qemu-${TARGET_ARCH}-static.tar.gz;
         docker build -f "$DOCKERFILE" -t "$IMAGE" .;
       fi
    '
    - docker images

    # Where the real magic happens
    - 'docker run --name $NAME -v $(pwd):/saved
          -e BASE=$BASE -e OS=$IMAGE -e BUILD_OPTS=$BUILD_OPTS -e DEV=$DEV -e CC=gcc -e STATIC=$STATIC $IMAGE
          bash -e -c "cd /saved && test/ci-images.sh BUILD_MOZ"
    '
    - docker commit $NAME $REPO:$NAME

    # Prepare to publish
    - docker tag "$REPO:$NAME" "$REPO:job-"$CI_JOB_ID"_$NAME"
    - docker images
    - docker login ${CI_REGISTRY} -u ${CI_REGISTRY_USER} -p ${CI_REGISTRY_PASSWORD}

    # Do not push (if requested)
    - 'if [[ "$CI_PIPELINE_SOURCE" == "schedule" || "$log_message" != *"[dont push]"* ]]; then
         docker push $REPO;
       fi
    '

    # Done
    - *CI_footer

fedora.static-analysis:
  <<: *create_images
  variables:
    BASE: "fedora"
    DOCKER_DRIVER: overlay
    IMAGE: "fedora:latest"
    NAME: "fedora.static-analysis"
    REPO: "${CI_REGISTRY}/${CI_PROJECT_PATH}"
    STATIC: "analysis"

SM52-debug-gcc.fedora-dev:
  <<: *create_images
  variables:
    BASE: "fedora"
    BUILD_OPTS: "--enable-debug"
    DEV: "devel"
    DOCKER_DRIVER: overlay
    IMAGE: "fedora:rawhide"
    NAME: "SM52-debug-gcc.fedora-dev"
    REPO: "${CI_REGISTRY}/${CI_PROJECT_PATH}"

fedora.aarch64.gcc:
  <<: *create_images
  variables:
    BASE: "fedora"
    DEV: "devel"
    DOCKER_DRIVER: overlay
    DOCKERFILE: "test/extra/Dockerfile.arm64v8.fedora.29"
    IMAGE: "${CI_REGISTRY}/${CI_PROJECT_PATH}:SM52-gcc.fedora-dev.aarch64"
    NAME: "SM52-gcc.fedora-dev.aarch64"
    REPO: "${CI_REGISTRY}/${CI_PROJECT_PATH}"
    STATIC: "qemu"
    TARGET_ARCH: "aarch64"

fedora.ppc64le.gcc:
  <<: *create_images
  variables:
    BASE: "fedora"
    DEV: "devel"
    DOCKER_DRIVER: overlay
    DOCKERFILE: "test/extra/Dockerfile.ppc64le.fedora.29"
    IMAGE: "${CI_REGISTRY}/${CI_PROJECT_PATH}:SM52-gcc.fedora-dev.ppc64le"
    NAME: "SM52-gcc.fedora-dev.ppc64le"
    REPO: "${CI_REGISTRY}/${CI_PROJECT_PATH}"
    STATIC: "qemu"
    TARGET_ARCH: "ppc64le"
