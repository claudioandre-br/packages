environment:
  global:
    PROJ_FOLDER: C:\projects
    BUILD_FOLDER: C:\projects\JohnTheRipper\src

  matrix:
    # CygWin 64bits build on Windows Server 2016
    - APPVEYOR_BUILD_WORKER_IMAGE: Visual Studio 2017
      arch: x86_64
      bits: 64
      doing: test
      test: yes
      location: cygwin64

    # CygWin 64bits build
    - arch: x86_64
      bits: 64
      doing: deploy
      test: yes
      location: cygwin64

    # CygWin 32bits build
    - arch: x86
      bits: 32
      doing: deploy
      test: yes
      location: cygwin

    # MinGW requires a patch in configure
    # - it is necessary to disable 'Handle --prefix -> JOHN_SYSTEMWIDE'

install:
  - echo '--------------------------------'
  - systeminfo | findstr /C:"OS"
  - echo '--------------------------------'

  - cd %BUILD_FOLDER%
  - git describe --dirty=+ --always 2>nul > __git.tmp
  - set /p gitDescribe=<__git.tmp
  - appveyor UpdateBuild -Version "1.8J1-%gitDescribe%"

  - ps: |
      if ($env:Test -eq "package") {
        # Use upstream source code
        cd $env:PROJ_FOLDER
        Remove-Item ./JohnTheRipper -Force -Recurse -ErrorAction SilentlyContinue
        git clone -q --depth 1 https://github.com/magnumripper/JohnTheRipper.git JohnTheRipper
        cd $env:BUILD_FOLDER
      }
  - git describe --dirty=+ --always 2>nul > __git.tmp
  - set /p gitDescribe=<__git.tmp
  - echo "JtR 1.8J1-%gitDescribe%"
  - echo '--------------------------------'

  - ps: |
      $arch = $env:Arch
      $bits = $env:Bits
      $doing = $env:Doing
      $location = $env:Location
      $buildFolder = $env:BUILD_FOLDER
      $posixBuildFolder = $buildFolder -Replace '\\', '/'
      $env:PATH="C:\$location\bin;C:\$location\usr\bin;$env:PATH"

      function shell($command, $dieOnError = $true) {

        Write-Host "Executing '$command'"
          & "C:\$location\bin\bash" -lc ". /etc/profile && cd $posixBuildFolder && $command"

        if ($LASTEXITCODE -ne 0) {
          Write-Host "'$command' failed with exit code $LASTEXITCODE! " -ForegroundColor Red -NoNewline

          if ($dieOnError) {
            exit $LASTEXITCODE
          }
        }
      }

build_script:
  # Install required packages and allow extra formats
  - ps: |
      cmd /c "C:\$env:Location\setup-$env:Arch.exe -q -P openssl-devel -P libbz2-devel -P libgmp-devel -P zlib-devel"
      cmd /c "C:\$env:Location\setup-$env:Arch.exe -q -P libOpenCL-devel -P libcrypt-devel"

  - ps: |
      Write-Host "----------------------------"
      Write-Host "   =====  Building  =====   " -ForegroundColor White
      Write-Host "----------------------------"

  - ps: |
      echo 'Compiler version'
      shell "gcc --version"
      echo '--------------------------------'
      shell "gcc -dM -E -x c /dev/null"
      echo '--------------------------------'

      if ($doing -eq "deploy") {
        # CPU (OMP and extensions fallback)
        shell "./configure --disable-native-tests --disable-openmp CPPFLAGS='-msse2' && make -s clean && make -sj2  && make -s strip && mv ../run/john ../run/john-sse2-non-omp"
        shell "./configure --disable-native-tests                  CPPFLAGS='-msse2  -DOMP_FALLBACK -DOMP_FALLBACK_BINARY=\`"\\\`"john-sse2-non-omp\\\`"\`" ' && make -s clean && make -sj2 && make -s strip && mv ../run/john ../run/john-sse2"
        shell "./configure --disable-native-tests --disable-openmp CPPFLAGS='-msse4.1 -DCPU_FALLBACK -DCPU_FALLBACK_BINARY=\`"\\\`"john-sse2\\\`"\`" ' && make -s clean && make -sj2  && make -s strip && mv ../run/john ../run/john-sse41-non-omp"
        shell "./configure --disable-native-tests                  CPPFLAGS='-msse4.1 -DOMP_FALLBACK -DOMP_FALLBACK_BINARY=\`"\\\`"john-sse41-non-omp\\\`"\`" -DCPU_FALLBACK -DCPU_FALLBACK_BINARY=\`"\\\`"john-sse2\\\`"\`" ' && make -s clean && make -sj2  && make -s strip && mv ../run/john ../run/john-sse41"
        shell "./configure --disable-native-tests --disable-openmp CPPFLAGS='-mavx   -DCPU_FALLBACK -DCPU_FALLBACK_BINARY=\`"\\\`"john-sse41\\\`"\`" ' && make -s clean && make -sj2  && make -s strip && mv ../run/john ../run/john-avx-non-omp"
        shell "./configure --disable-native-tests                  CPPFLAGS='-mavx   -DOMP_FALLBACK -DOMP_FALLBACK_BINARY=\`"\\\`"john-avx-non-omp\\\`"\`" -DCPU_FALLBACK -DCPU_FALLBACK_BINARY=\`"\\\`"john-sse41\\\`"\`" ' && make -s clean && make -sj2  && make -s strip && mv ../run/john ../run/john-avx"
        shell "./configure --disable-native-tests --disable-openmp CPPFLAGS='-mxop   -DCPU_FALLBACK -DCPU_FALLBACK_BINARY=\`"\\\`"john-avx\\\`"\`" ' && make -s clean && make -sj2  && make -s strip && mv ../run/john ../run/john-xop-non-omp"
        shell "./configure --disable-native-tests                  CPPFLAGS='-mxop   -DOMP_FALLBACK -DOMP_FALLBACK_BINARY=\`"\\\`"john-xop-non-omp\\\`"\`" -DCPU_FALLBACK -DCPU_FALLBACK_BINARY=\`"\\\`"john-avx\\\`"\`" ' && make -s clean && make -sj2  && make -s strip && mv ../run/john ../run/john-xop"
        shell "./configure --disable-native-tests --disable-openmp CPPFLAGS='-mavx2  -DCPU_FALLBACK -DCPU_FALLBACK_BINARY=\`"\\\`"john-xop\\\`"\`" ' && make -s clean && make -sj2  && make -s strip && mv ../run/john ../run/john-avx2-non-omp"
        shell "./configure --disable-native-tests                  CPPFLAGS='-mavx2  -DOMP_FALLBACK -DOMP_FALLBACK_BINARY=\`"\\\`"john-avx2-non-omp\\\`"\`" -DCPU_FALLBACK -DCPU_FALLBACK_BINARY=\`"\\\`"john-xop\\\`"\`" ' && make -s clean && make -sj2  && make -s strip"

        # Configure OpenCL ICD
        shell "mkdir -p ../etc/OpenCL/vendors"
        shell "echo 'c:\Windows\System32\amdocl64.dll' > ../etc/OpenCL/vendors/amd.icd"
        shell "echo 'c:\Windows\System32\nvopencl.dll' > ../etc/OpenCL/vendors/nvidia.icd"

        # Install OpenCL kernel code
        shell "make -s kernel-copy"

        # Remove unused stuff
        shell "rm -rf ../run/kerberom"
        shell "rm -rf ../run/ztex"

        # Save CygWin Dlls
        mkdir ..\lib
        xcopy C:\$location\bin\*.dll ..\lib\

        # Needed dlls (Tested on Windows 7 32 bits and Windows 10 64 bits)
        xcopy C:\$location\bin\cygwin1.dll         ..\run\
        xcopy C:\$location\bin\cygbz2-1.dll        ..\run\
        xcopy C:\$location\bin\cygcrypto-1.0.0.dll ..\run\
        xcopy C:\$location\bin\cyggomp-1.dll       ..\run\
        xcopy C:\$location\bin\cyggmp-10.dll       ..\run\
        xcopy C:\$location\bin\cygssl-1.0.0.dll    ..\run\
        xcopy C:\$location\bin\cygz.dll            ..\run\
        xcopy C:\$location\bin\cygcrypt-0.dll      ..\run\
        xcopy C:\$location\bin\cygOpenCL-1.dll     ..\run\

        if ($arch -eq "x86_64") {
          xcopy C:\$location\bin\cyggcc_s-seh-1.dll ..\run\
        } else {
          xcopy C:\$location\bin\cyggcc_s-1.dll     ..\run\
        }
      } else {
        shell "./configure --disable-opencl && make -s clean && make -sj2"
      }

test_script:
  - ps: |
      Write-Host "----------------------------"
      Write-Host "    =====  Testing  =====   " -ForegroundColor White
      Write-Host "----------------------------"

  - cd %PROJ_FOLDER%\JohnTheRipper\run

  # ASLR and DEP
  - echo "Enable ASLR and DEP for the Windows binary of JtR"
  - peflags --dynamicbase=true --nxcompat=true *.exe

  # Save checksums
  - echo "Create and save checksums"
  - ps: echo "File verification is the process of using an algorithm for verifying the integrity of a computer file. This can be done by comparing two files bit-by-bit, but requires two copies of the same file, and may miss systematic corruptions which might occur to both files. A more popular approach is to also store checksums (hashes) of files, also known as message digests, for later comparison." | Tee-Object -FilePath ..\checksums.txt -Append
  - ps: echo "**************************************************************************" | Tee-Object -FilePath ..\checksums.txt -Append

  - ps: Get-FileHash -Path .\*.exe | Tee-Object -FilePath ..\checksums.txt -Append

  # Build info
  - john --list=build-info

  - echo $NT$066ddfd4ef0e9cd7c256fe77191ef43c > tests.in
  - echo $NT$8846f7eaee8fb117ad06bdd830b7586c >> tests.in
  - echo df64225ca3472d32342dd1a33e4d7019f01c513ed7ebe85c6af102f6473702d2 >> tests.in
  - echo 73e6bc8a66b5cead5e333766963b5744c806d1509e9ab3a31b057a418de5c86f >> tests.in
  - echo $6$saltstring$fgNTR89zXnDUV97U5dkWayBBRaB0WIBnu6s4T7T8Tz1SbUyewwiHjho25yWVkph2p18CmUkqXh4aIyjPnxdgl0 >> tests.in

  - echo "====> T0:"
  - if "%test%" == "yes" (
        john -test-full=0 --format=cpu
    )

  - echo "====> T6.0:"
  - john -test=3 -form='dynamic=md5(sha1($s).md5($p))'
  - echo "====> T6.1:"
  - john -test=3 -form='dynamic=md5(sha1($s.$p).md5($p))'
  - echo "====> T6.2:"
  - john -test=3 -form='dynamic=md5($p)'

  - echo "====> T10:"
  - john tests.in --format=nt --fork=2 --max-run-time=300
  - echo "====> T11:"
  - john tests.in --format=raw-sha256 --fork=2 --max-run-time=300
  - echo "====> T12:"
  - john tests.in --format=sha512crypt --max-run-time=300

  # Remove the left-over from testing
  - del john.log
  - del john.pot

on_failure:
  - dir ..\ /s > dir.txt
  - if exist "dir.txt" 7z a -tzip debug_logs.zip "dir.txt" > nul
  - if exist "..\src\config.log" 7z a -tzip debug_logs.zip "..\src\config.log" > nul
  - if exist "debug_logs.zip" appveyor PushArtifact "debug_logs.zip"

on_finish:
  - if exist "%PROJ_FOLDER%\JohnTheRipper\lib" 7z a -tzip "optional.zip" "%PROJ_FOLDER%\JohnTheRipper\lib"
  - if exist "optional.zip" appveyor PushArtifact "optional.zip"
  - if exist "optional.zip" del "optional.zip"

  - if exist "%PROJ_FOLDER%\JohnTheRipper\run\john.exe" 7z a -tzip "win_x%bits%.zip" "%PROJ_FOLDER%\JohnTheRipper\run"
  - if exist "%PROJ_FOLDER%\JohnTheRipper\run\john.exe" if "%doing%" == "deploy" 7z a -tzip "win_x%bits%.zip" "%PROJ_FOLDER%\JohnTheRipper\doc"
  - if exist "%PROJ_FOLDER%\JohnTheRipper\run\john.exe" if "%doing%" == "deploy" 7z a -tzip "win_x%bits%.zip" "%PROJ_FOLDER%\JohnTheRipper\READ*"
  - if exist "%PROJ_FOLDER%\JohnTheRipper\run\john.exe" if "%doing%" == "deploy" 7z a -tzip "win_x%bits%.zip" "%PROJ_FOLDER%\JohnTheRipper\checksums.txt"
  - if exist "%PROJ_FOLDER%\JohnTheRipper\run\john.exe" if "%doing%" == "deploy" 7z a -tzip "win_x%bits%.zip" "%PROJ_FOLDER%\JohnTheRipper\etc"
  - if exist "win_x%bits%.zip" if "%doing%" == "deploy" appveyor PushArtifact "win_x%bits%.zip"

  - ps: |
      if ($Zipfile = Get-ChildItem "win_x$bits.zip") {
        Get-FileHash "win_x$bits.zip"

      } else {
        Write-Host "---------------------------------------"
        Write-Host "    =====  No Files to Upload  =====   " -ForegroundColor White
        Write-Host "---------------------------------------"
      }

